#pragma once


/*
void solveMatrix (int n, double *a, double *b, double *c, double *v, double *x)
{
        ///**
         //* n - число уравнений (строк матрицы)
         //* a - главная диагональ матрицы A
         //* b - диагональ, лежащая под главной
         //* c - диагональ, лежащая над главной
         //* v - правая часть (столбец)
         //* x - решение, массив x будет содержать ответ
         //
        for (int i = 1; i < n; i++)
        {
                double m = b[i]/a[i-1];
                a[i] = a[i] - m*c[i-1];
                v[i] = v[i] - m*v[i-1];
        }
 
        x[n-1] = v[n-1]/a[n-1];  
 
        for (int i = n - 2; i >= 0; i--)  
                x[i]=(v[i]-c[i]*x[i+1])/a[i];
}
*/


//template<class T,class Matrix_T,class Vector_T,template<class> class MatrixArray,template<class,class> class Operation>


template<class T,class Matrix_T,class Vector_T,class MatrixArray,class Operation>
struct sweep_base_t
{
	typedef typename Matrix_T matrix_t;
	typedef typename Vector_T vector_t;
	//typedef typename Operation<Matrix_T,Vector_T> op_t;
	//typedef typename MatrixArray<Matrix_T> matrix_array_t;
	typedef typename Operation op_t;
	typedef typename MatrixArray matrix_array_t;
	matrix_array_t* psweep_data;

	sweep_base_t(matrix_array_t* pmao=0):psweep_data(pmao){};

	template<class BandT,class MatrixCacheT>
	int initialize(int n,BandT& band,MatrixCacheT& cache)
	{
		T* _this=static_cast<T*>(this);
		return _this->inner_initialize(band,n,cache);
	}

	template<class BandT,class MatrixCacheT>
	int initialize(BandT& band,MatrixCacheT& cache)
	{
		T* _this=static_cast<T*>(this);
		return _this->inner_initialize(band,band.size(),cache);
	}

	template<class VectorArrayT, class VectorCacheT>
	int make(VectorArrayT& v,VectorCacheT& cache)
	{
		T* _this=static_cast<T*>(this);
		return _this->inner_make(v,cache);
	}
	template<class VectorArrayT, class VectorCacheT>
	int inner_make(VectorArrayT& xx,VectorCacheT& cache)
	{
		//typedef VectorCacheT::value_t temp_vector_t;
		typedef vector_t temp_vector_t;
		matrix_array_t& sweep_data=*psweep_data;

		int n=sweep_data.size();

		temp_vector_t& v0=cache[0];
		temp_vector_t& xcia=cache[0];
		temp_vector_t& xia=cache[3];
		temp_vector_t& vm=cache[1];
		temp_vector_t& v=cache[2];
		temp_vector_t& x=cache[1];
		temp_vector_t& xp=cache[2];
		
		
		v0=xx[0];
		vm=v0;

		for (int i = 1; i < n; i++)
		{
			//xx[i] = xx[i] - m*xx[i-1];
			v=xx[i];
			op_t::matrix_vector_affine(sweep_data[i].m,vm,v,-1,1);
			
    		xx[i]=v;
			vm=v;
		}

        xp=xx[n-1];
		op_t::matrix_vector_affine(sweep_data[n-1].ia,vm,xp);
		xx[n-1]=xp;

		for (int i = n - 2; i >= 0; i--)  
		{
			// xca= (c[i]/a[i])*x[i+1]
            op_t::matrix_vector_affine(sweep_data[i].cia,xp,xcia);
            x=xx[i];
			op_t::matrix_vector_affine(sweep_data[i].ia,x,xia);
			op_t::vector_add(xia,xcia);
			xx[i]=xcia;
			if(i>0) xp=xcia;
		}
			//x[i]=(v[i]-c[i]*x[i+1])/a[i];


		
		return 0;
	}


	template<class BandT,class MatrixCacheT>
	int inner_initialize(BandT& band,int n,MatrixCacheT& cache)
	{
		int err=0;
		typedef BandT band_t;
		//typedef MatrixCacheT::value_t temp_matrix_t;
		typedef matrix_t temp_matrix_t;

		const int index_a=1,index_b=0,index_c=2;

		matrix_array_t& sweep_data=*psweep_data;
		
		//int n=band.size();
		sweep_data.resize(n);


        temp_matrix_t &a=cache[0];
		temp_matrix_t &m=cache[1];
		temp_matrix_t &c=cache[2];
		temp_matrix_t &tmp2=cache[3];
		temp_matrix_t &tmp=cache[4];



          
		  a=band[0][index_a];
		  tmp=a;
		  tmp2=tmp;
          m=tmp;
    	  
          
		if(err=op_t::matrix_invert(a,tmp,tmp2)) return err;

		sweep_data[0].ia=a;


		for(int i=1;i<n;i++)
		{
			
               c=band[i-1][index_c];

			   op_t::matrix_matrix_affine(c,a,tmp,-1);
			   sweep_data[i-1].cia=tmp;

			//  m=b[1]/a[i-1]

			


			op_t::matrix_matrix_affine(band[i][index_b],a,m);

			sweep_data[i].m=m;


			
			// a=band[i].a
			a=band[i][index_a];
		

			// a = a - m*c[i-1];
			op_t::matrix_matrix_affine(m,c,a,-1,1);
		
			// a=1/a
			if(err=op_t::matrix_invert(a,tmp,tmp2)) return err;
			// 		   

			   sweep_data[i].ia=a;

		   //		sweep_data[0].cia=a;

		

		}



       return err;
	}



};


#include <vector>

template <class number_T,class vector_T=number_T,class matrix_T=number_T>
struct overloaded_matrix_op_t
{

	typedef typename number_T number_t;
	typedef typename matrix_T matrix_t;
	typedef typename vector_T vector_t;

	inline   static int matrix_invert(matrix_t& a,matrix_t& cache,matrix_t& cache2) { a=1/a;return 0;}
	inline 	static void matrix_matrix_affine(matrix_t& m1,matrix_t& m2,matrix_t& m_out,number_t alpha=1, number_t beta=0)
	{
		number_t r= beta*m_out+alpha*(m1*m2);
		m_out=r;
	};

	inline 	static void matrix_vector_affine(matrix_t& m1,vector_t& m2,vector_t& m_out,number_t alpha=1 ,number_t beta=0)
	{
		number_t r= beta*m_out+alpha*(m1*m2);
		m_out=r;
	};

	inline 	static void vector_add(vector_t& m,vector_t& m_out)
	{
		m_out+=m;
	};
	inline 	static void vector_affine(vector_t& m,vector_t& m_out,number_t alpha=1, number_t beta=0)
	{
		number_t r= beta*m_out+alpha*m;
		m_out=r;
	};

};


template <class number_T,class vector_T=number_T,class matrix_T=number_T,template<class,class,class> class OperationT=overloaded_matrix_op_t >
struct sweep_matrix_simple_t
{

typedef typename number_T number_t;
typedef typename matrix_T matrix_t;
typedef typename vector_T vector_t;
typedef typename OperationT<number_t,vector_t,matrix_t> op_t;

/*
   struct op_t
  {

	inline   static int matrix_invert(matrix_t& a) { a=1/a;return 0;}
	inline 	static void matrix_matrix_affine(matrix_t& m1,matrix_t& m2,matrix_t& m_out,number_t alpha=1, number_t beta=0)
	{
        number_t r= beta*m_out+alpha*(m1*m2);
		m_out=r;
	};

	inline 	static void matrix_vector_affine(matrix_t& m1,vector_t& m2,vector_t& m_out,number_t alpha=1 ,number_t beta=0)
	{
		number_t r= beta*m_out+alpha*(m1*m2);
		m_out=r;
	};

	inline 	static void vector_add(vector_t& m,vector_t& m_out)
	{
		m_out+=m;
	};
	inline 	static void vector_affine(vector_t& m,vector_t& m_out,number_t alpha=1, number_t beta=0)
	{
		number_t r= beta*m_out+alpha*m;
		m_out=r;
	};
		 
   };
*/
   
   struct band_triplet_t
   {
	   matrix_t r[3];
	   inline matrix_t& operator[](int n){ return r[n];};
	   band_triplet_t(){};
	   band_triplet_t(const matrix_t& b,const matrix_t& a,const matrix_t& c)
	   {
		   r[0]=b;
		   r[1]=a;
		   r[2]=c;
	   }




   } ;

   struct matrix_triplet_t
   {
	   matrix_t m;
	   matrix_t ia;
	   matrix_t cia;
   } ;

   typedef std::vector<band_triplet_t> band_t;
   typedef std::vector<matrix_triplet_t> matrix_array_t;

   
   //std::vector< vector_t> vector_cache;
   //



   struct sweep_t:sweep_base_t<sweep_t,matrix_t,vector_t,matrix_array_t,op_t>{};

   sweep_t sweep;
   matrix_array_t sweep_data;
   int err;

   sweep_matrix_simple_t()
   {
	   err=-1;
      //sweep_data.resize(N);
	  
	  //vector_cache.resize(8);
	  sweep.psweep_data=&sweep_data;
    }

   template <class BandT,class Cache>
   sweep_matrix_simple_t& initialize(int n,BandT& band,Cache& matrix_cache)
   {

	  //matrix_t  tmp[4];
	  
      err=sweep.initialize(n,band,matrix_cache); 

	  return *this;
   }

   template <class BandT,class Cache>
   sweep_matrix_simple_t& initialize(BandT& band,Cache& matrix_cache)
   {
	   
	   err=sweep.initialize(band,matrix_cache); 
	   return *this;
   }

   template <class BandT>
   sweep_matrix_simple_t& initialize(int n,BandT& band)
   {

	   //matrix_t  tmp[4];
	   std::vector< matrix_t> matrix_cache(8);
	   return initialize(n,band,matrix_cache);
   }

   template <class BandT>
   sweep_matrix_simple_t& initialize(BandT& band)
   {
	   std::vector< matrix_t> matrix_cache(8);
	   return initialize(band,matrix_cache);
   }

   template <class VArrayT,class Cache>
   bool operator()(VArrayT& vv,Cache& cache,int count=1)
   {
	   
	   
	   for(int n=0;n<count;n++)
	   {
		 if(err) break;
	     err=sweep.make(vv,cache); 
	   }
	   return err==0;
   }

   template <class VArrayT>
   bool operator()(VArrayT& vv,int count=1)
   {
          vector_t  tmp[8];
		  return (*this)(vv,tmp,count);
   }

   operator bool(){return err==0;};
 };




#pragma once

#include <mkl.h>


template <class _N>
struct v_t
{

	v_t(_N _v=_N()):v(_v){};

	operator _N&()
	{
		return v;
	}


	_N* operator &()
	{
		return &v;
	}

	_N v;
};


inline v_t<int> get_iwork_size(int mm)
{
	MKL_Complex16 szz;
	int info,iwork=-1;
	zgetri(&mm,0,&mm,0,&szz,&iwork,&info);
	if(info) return -1;
	return int(szz.real);
}


inline int matrix_inverse(float* pmm,int sz,int *ipiv,float* pwork,int szwork)
{
	int info;
	sgetrf(&sz,&sz,pmm,&sz,ipiv,&info);
	if(!info) sgetri(&sz,pmm,&sz,ipiv,pwork,&szwork,&info);
	return info;
};

inline int matrix_inverse(double* pmm,int sz,int *ipiv,double* pwork,int szwork)
{
	int info;
	dgetrf(&sz,&sz,pmm,&sz,ipiv,&info);
	if(!info) dgetri(&sz,pmm,&sz,ipiv,pwork,&szwork,&info);
	return info;
};

//sgemm("n","n",&lda,&lda,&lda,&alpha,a0,&lda,b,&lda,&beta,c,&lda);


inline void matrix_matrix_affine(float* mm_1,float* mm_2,float* mm_3_out,int sz,float alpha=1,float beta=0)
{
	sgemm("n","n",&sz,&sz,&sz,&alpha,mm_1,&sz,mm_2,&sz,&beta,mm_3_out,&sz);
};

inline void matrix_matrix_affine(double* mm_1,double* mm_2,double* mm_3_out,int sz,double alpha=1,double beta=0)
{
	dgemm("n","n",&sz,&sz,&sz,&alpha,mm_1,&sz,mm_2,&sz,&beta,mm_3_out,&sz);
};

inline void matrix_vector_affine(float* mm,float* x,float* y_out,int sz,float alpha=1,float beta=0,int incx=1,int incy=1)
{
	sgemv("n",&sz,&sz,&alpha,mm,&sz,x,&incx,&beta,y_out,&incy);
};


inline void matrix_vector_affine(double* mm,double* x,double* y_out,int sz,double alpha=1,double beta=0,int incx=1,int incy=1)
{
	dgemv("n",&sz,&sz,&alpha,mm,&sz,x,&incx,&beta,y_out,&incy);
};


template <class T,class numberT,int L=1>
struct mtxq_base_t
{
	typedef typename numberT value_t;
	int n;
	value_t* data; 
/*
	inline number_t* operator[](int l)
	{
		return data[l];
	}
*/
	mtxq_base_t():n(0){};
	mtxq_base_t(const mtxq_base_t& o):n(0)
	{
      assign(o);    
	};
	mtxq_base_t( mtxq_base_t& o):n(0)
	{
       assign(o);
	};

inline size_t fullsize(size_t siz)
{
	if(L==2) siz*=siz;
	return siz*sizeof(value_t);
}
inline int resize(size_t siz)
{
	int sizb;
	if(siz==0)
	{
		if(n) ::free(data);
 		 return n=0;
	}
	sizb=fullsize(siz);
	if(n==0) 	   
		  data=(value_t*)::malloc(sizb);
	else
	{
		value_t* p=(value_t*)::realloc(data,sizb);
		if(p) data=p;
		else ::free(data);
	}
		n=(data)?siz:0;
	return sizb;
}

inline    int reload(int n,numberT* pdata=0) 
{
	T* thisT=static_cast<T*>(this);
	int sz=thisT->resize(n);
	if(sz&&pdata) memcpy(data,pdata,sz);
	return sz;
};
inline    mtxq_base_t& assign(int n,numberT* pdata=0)
{
	reload(n,pdata);
	return *this;
}

template <class Other>
inline     mtxq_base_t& assign(const mtxq_base_t<Other,value_t,L>& m)
	{
		
/*
		int nn=m.n;
		T* thisT=static_cast<T*>(this);
		 if(nn=thisT->resize(nn))	memcpy(data,m.data,nn);
		 */
         reload(m.n,m.data);
		return *this;
	}
~mtxq_base_t()
 {
	 T* thisT=static_cast<T*>(this);
	 thisT->resize(0);
 }
};

template<class numberT,int L=1,int mem_align=16>
struct mtx_mkl_t:mtxq_base_t<mtx_mkl_t<numberT,L,mem_align>,numberT,L>
{
	inline int resize(size_t siz)
	{
		int sizb;
		if(siz==0)
		{
			if(n) ::mkl_free(data);
			return n=0;
		}
		sizb=fullsize(siz);

		if(siz>n)
		{
			if(n) ::mkl_free(data);
			data=(value_t*)::mkl_malloc(sizb,mem_align);
		}
		n=(data)?siz:0;
		return sizb;
	}
	
	mtx_mkl_t(){};
	mtx_mkl_t(int n,numberT* pdata=0)
	{
		reload(n,pdata);
	}

	template <class Other>
	inline  mtx_mkl_t& operator=(const mtxq_base_t<Other,value_t,L>& m)
	{
		assign(m);
		return *this;
	}
};


template<class numberT,int mem_align=16>
struct matrix_mkl_t:mtx_mkl_t<numberT,2,mem_align>
{
	matrix_mkl_t(){};
	matrix_mkl_t(int n,numberT* pdata):mtx_mkl_t(n,pdata){};

/*
	inline  matrix_mkl_t& operator=(matrix_mkl_t& m)
	{
		assign(m);
		return *this;
	}
*/
	inline  matrix_mkl_t& operator=(const matrix_mkl_t& m)
	{
		assign(m);
		return *this;
	}

//	/*
	template <class Other>
	inline  matrix_mkl_t& operator=(const mtxq_base_t<Other,value_t,2>& m)
	{
		 assign(m);
		 return *this;
	}
//	*/
};

template<class numberT,int mem_align=16>
struct vector_mkl_t:mtx_mkl_t<numberT,1,mem_align>
{
	vector_mkl_t(){};
	vector_mkl_t(int n,numberT* pdata):mtx_mkl_t(n,pdata){};

	inline     vector_mkl_t& operator=(const vector_mkl_t& m)
	{
		assign(m);
		return *this;
	}

	template <class Other>
	inline     vector_mkl_t& operator=(const mtxq_base_t<Other,value_t,1>& m)
	{
		 assign(m);
		return *this;
	}
};

//#include <vector>

template<class mklT,int Size=8>
struct cache_mkl_t
{
	enum	{		size=Size	};

	typedef typename mklT item_t;

	item_t item[Size];

	inline  item_t& operator [](int n)
	{
		return item[n];
	}
       cache_mkl_t(int N)
	   {
          for(int n=0;n<Size;n++)
			  item[n].assign(N);
	   }
};


template <class number_T,class vector_T,class matrix_T>
struct mkl_matrix_operation_t
{

	typedef typename number_T number_t;
	typedef typename matrix_T matrix_t;
	typedef typename vector_T vector_t;

	inline   static int matrix_invert(matrix_t& a,matrix_t& cache,matrix_t& cache2)
	{
        //inline int matrix_inverse(double* pmm,int sz,int *ipiv,double* pwork,int szwork)
		int n=a.n;
		int szwork=n*n;
		int* ipid=(int*)(cache2.data);
		return ::matrix_inverse(a.data,n,ipid,cache.data,szwork);
		
	}

//	inline void matrix_matrix_affine(double* mm_1,double* mm_2,double* mm_3_out,int sz,double alpha=1,double beta=0)
//	inline void matrix_vector_affine(float* mm,float* x,float* y_out,int sz,float alpha=1,float beta=0,int incx=1,int incy=1)

	inline 	static void matrix_matrix_affine(matrix_t& m1,matrix_t& m2,matrix_t& m_out,number_t alpha=1, number_t beta=0)
	{
		::matrix_matrix_affine(m1.data,m2.data,m_out.data,m1.n,alpha,beta);
	};

	inline 	static void matrix_vector_affine(matrix_t& mm,vector_t& v,vector_t& v_out,number_t alpha=1 ,number_t beta=0)
	{
		
		::matrix_vector_affine(mm.data,v.data,v_out.data,mm.n,alpha,beta);
	};

	inline 	static void vector_add(vector_t& m,vector_t& m_out)
	{
		//m_out+=m;
		for(int i=0;i<m.n;i++)
			m_out.data[i]+=m.data[i];
	};
/*
	inline 	static void vector_affine(vector_t& m,vector_t& m_out,number_t alpha=1, number_t beta=0)
	{
		//number_t r= beta*m_out+alpha*m;
		//m_out=r;
	};
*/

};
