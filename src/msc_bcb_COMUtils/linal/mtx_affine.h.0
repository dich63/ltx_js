#pragma once

#include "matrix_sweep.h"
#include "mtxq.h"


template <class number_T,class matrix_T=number_T,bool fpacked=true>
struct affine_matrix_t
{
	enum
	{
		mask_a=1,
		mask_b=2,
		mask_d=4
	};

	long flags;
	typedef typename number_T number_t;
	typedef typename matrix_T matrix_t;
	typedef typename matrix_T vector_t;

	matrix_t a,b;
	number_t d;
	affine_matrix_t():flags(0),d(1){};

	inline void clear()
	{
		if(fpacked)
		{
			clear_matrix(a);
			clear_matrix(b);
			clear_matrix(d);
		} 

		flags=mask_a|mask_b|mask_d;
	}

	template <class M1,class M2>
	affine_matrix_t(const M1& m1,const M2& m2,number_t _d=1):flag(0),d(_d)
	{
		if(is_null(a)) flags|=mask_a;
		if(is_null(b)) flags|=mask_b;
		if(is_null(d)) flags|=mask_d;
	};

	template <typename Other>
	affine_matrix_t& operator=(const Other& o)
	{

		flags=o.flags;
		if(!(o.flags&mask_a)) a=o.a;
		if(!(o.flags&mask_b)) b=o.b;
		if(!(o.flags&mask_d)) d=o.d;


		return *this;
	}
	affine_matrix_t& assign(int N,int M=1,number_t* pa=0,number_t* pb=0,number_t _d=0)
	{
		//flags=mask_a|mask_b|mask_d;
		flags=0;
		if(pa==0) flags|=mask_a;
		if(pb==0) flags|=mask_b;
		if(d==0) flags|=mask_d;

		d=_d;
		a.assign(N,M,pa);
		b.assign(N,M,pb);
		return *this;

	}

};


template <class AffineMatrixT,class AffineVectorT,class Matrix_opT>
struct affine_matrix_op_t
{
	typedef typename  Matrix_opT op_t;
	typedef typename AffineMatrixT matrix_t;
	typedef typename AffineVectorT vector_t;
	typedef typename  matrix_t::number_t number_t;
	typedef typename  matrix_t::matrix_t matrix_block_t;

	inline   static int matrix_invert(matrix_t& a,matrix_t& cache,matrix_t& cache2)
	{ 
		long flags=a.flags;
		if(matrix_t::mask_d&&flags) return -1;

		int err;
		if(err=op_t::matrix_invert(a.a,cache.a,cache2.a)) 
			return err;

		number_t d=1/a.d;
		a.d=d;

		if((matrix_t::mask_b&flags)==0)
		{
			matrix_matrix_affine(a.a,a.b,cache.a,-d);
			a.b=cache.a;
		}

		return 0;
	}


	inline 	static void matrix_matrix_affine(matrix_t& m1,matrix_t& m2,matrix_t& m_out,number_t alpha=1,number_t beta=1)
	{
		//number_t r= beta*m_out+alpha*(m1*m2);

		//m_out=r;
		long fm1=m1.flags,fm2=m1.flags;
		long& fm_out=m_out.flags;

		if(beta==0)
		{
			fm_out=matrix_t::mask_d|matrix_t::mask_b;
		}


		op_t::matrix_matrix_affine(m1.a,m2.a,m_out.a,alpha,beta);


		if(((matrix_t::mask_d&&fm1)==0)&&((matrix_t::mask_d&&fm2)==0))
		{

			if((fm_out&matrix_t::mask_d)==0) m_out.d=beta*m_out.d+alpha*m1.d*m2.d;
			else m_out.d=alpha*m1.d*m2.d;
			fm_out&=~matrix_t::mask_d;

		}



		if((matrix_t::mask_b&&fm1)&&(matrix_t::mask_b&&fm2))
		{
			if((fm_out&matrix_t::mask_b)==0)
				op_t::matrix_mul_number(m_out.b,beta);

			return;
		}

		fm_out&=~matrix_t::mask_b;

		//number_t alpha_mul=alpha*(matrix_t::mask_d&&fm2)?0:m2.d; 

		number_t beta_mul=beta;

		if((matrix_t::mask_b&&fm2)==0)
		{
			op_t::matrix_matrix_affine(m1.a,m2.b,m_out.b,alpha,beta_mul);
			beta_mul=1;			  
		}

		if(((matrix_t::mask_b&&fm1)==0)&&((matrix_t::mask_d&&fm2)==0))
			op_t::matrix_linear_combination(m_out.b,m1.b,m_out.b,alpha*m2.d,beta_mul);


	};

	inline 	static void matrix_vector_affine(matrix_t& mm,vector_t& v,vector_t& v_out,number_t alpha=1 ,number_t beta=0)
	{

		//::matrix_vector_affine(mm.data,v.data,v_out.data,mm.n,alpha,beta);
	};

	inline 	static void vector_add(vector_t& m,vector_t& m_out)
	{
		//m_out+=m;
		for(int i=0;i<m.n;i++)
			m_out.a.data[i]+=m.a.data[i];
		if(((m_out.flags&matrix_t::mask_b)==0)&&((m_out.flags&matrix_t::mask_b)==0))
			for(int i=0;i<m.n;i++)
				m_out.b.data[i]+=m.b.data[i];

	};


};






