#pragma once
// #include "pade_nls.h" 
//#include<complex>
#include "pade/complex-intel.h"
#include "pade/pade_static.h"
#include "pade/accum_static.h"
#include "shuttle/rsc_cycle_shuttle.h"
#include "shuttle/rsc_shuttle.h"
#include "tbb/parallel_for.h"

typedef std::complex<double> complex_t;



template <class _MEMPOOL = mem_pool_t<> >
struct pade_nls_base_t{
	
	typedef _MEMPOOL pool_t;
	static constexpr complex_t ie = complex_t(0, 1);



	struct poles_solver_t {

		poles_solver_t(size_t _N, complex_t _polus, complex_t _res):N(_N),lu(_N),polus(_polus),res(_res){

			xz = pool.alloc(N,xz);
		}

		inline int factorize2(complex_t* am, complex_t a, complex_t* x0) {
			::memcpy(xz, x0, sizeof(complex_t) * N);
			return lu.factorize2(am, a + polus, xz);
		}
		size_t N;
		complex_t* xz;
		rsc_cycle_shuttle_t<complex_t, pool_t> lu;
		complex_t polus, res;
		pool_t pool;
		
	};


	inline void make(int b, int e, complex_t* am, complex_t a, complex_t* x0) {
		for (auto k = b; k < e; k++) {
			solvers[k].factorize2(am,a,x0);
		}
	}



	inline void makeall(complex_t* am, complex_t a, complex_t* x0, bool pp = 0) {

		if (pp) {
			tbb::parallel_for(tbb::blocked_range<int>(0, m),
				[&](const tbb::blocked_range<int>& r) {
					make(r.begin(), r.end(), am,a,x0);
				},afp);
		}
		else make(0, m, am, a, x0);
	
	}

	inline void step(complex_t* am, complex_t a, complex_t* x0, bool pp = 0) {
		makeall(am, a, x0, pp);
		accum(N, x0, xz, m);
	}



	pade_nls_base_t(size_t _N) :N(_N), n(-1), m(-1), dt(0), accum(nullptr){};

	pade_nls_base_t& init(int _n,int _m, double dt=1.0) {

		typedef pade_exp_poles_res_t<>::float_t f_t;

		std::complex<f_t> poles[NUMM];
		std::complex< f_t> res[NUMM];

		pade_exp_poles_res_t<>::poles_res(n = _n, m = _m, poles, res);

		accum = accum_static_t<complex_t>::get(m);


		auto jf = std::complex< f_t>(ie) / f_t(dt);

		solvers.init(m, [&](size_t k) {

			auto p = new poles_solver_t(N, jf * poles[k], jf * res[k]);
			xz[k] = p->xz;
			return p;
			});

		return *this;
	}


	double dt;
	size_t N;
	int n, m;
	accum_static_t<complex_t>::proc_t accum;
	complex_t* xz[NUMM];
	tbb::affinity_partitioner afp;
	mem_pool_t<> pool;
	c_array_t<poles_solver_t> solvers;

};